@model IEnumerable<MiniMercado.Models.Producto>

@{
    ViewData["Title"] = "Gestión de Stock";
    Layout = "~/Views/Shared/_StockScreenLayout.cshtml";
}


<div class="container mt-5">
    <div class="container-chad">
        <div class="table-container" style="max-height:50rem; overflow-y: auto;">
            <div class="titulo-tabla">
                @if (ViewData["ModoPrecioManual"] != null && (bool)ViewData["ModoPrecioManual"])
                {
                    <a href="@Url.Action("Index", "StockScreen")" class="btn-precio-manual btn btn-secondary mb-3">Productos</a>
                }
                else
                {
                    <a href="@Url.Action("PrecioManual", "StockScreen")" class="btn-precio-manual btn btn-warning mb-3">Precio manual</a>
                }

                <div class="input-group mb-4">
                    <input type="text" id="busquedaProductos" class="form-control rounded-pill text-center" placeholder="Toque para buscar productos...">
                </div>

                <a href="#" class="btn btn-sm btn-primary open-modal" id="agregar-producto"
                   data-url='@Url.Action("CreateParcial", "Producto", new { origen = (ViewData["ModoPrecioManual"] != null && (bool)ViewData["ModoPrecioManual"]) ? "preciomanual" : "index" })'>
                   Agregar Producto
                </a>
            </div>

            <div class="tabla-wrapper">
                <table class="table table-striped table-hover table-bordered" id="productTable">
                    <thead class="table-white">
                        <tr>
                            <th>Código</th>
                            <th>Nombre</th>
                            <th>Categoría</th>
                            <th>Stock</th>
                            <th>Precio Unitario</th>
                            <th>Proveedor</th>
                            <th>Estado</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            <tr class="fila-producto">
                                <td>@Html.DisplayFor(modelItem => item.CodigoDeBarra)</td>
                                <td>@Html.DisplayFor(modelItem => item.Nombre)</td>
                                <td>@Html.DisplayFor(modelItem => item.Categoria)</td>
                                <td>@Html.DisplayFor(modelItem => item.Stock)</td>
                                <td>@Html.DisplayFor(modelItem => item.PrecioUnitario)</td>
                                <td>@item.ProveedorNavigation?.Nombre</td>
                                <td>@(item.Estado.HasValue && item.Estado.Value ? "Activo" : "Inactivo")</td>
                                <td class="acciones">
                                    <a href="#" class="btn btn-sm btn-primary open-modal"
                                       data-url='@Url.Action("EditParcial", "Producto", new { id = item.IdProducto, origen = (ViewData["ModoPrecioManual"] != null && (bool)ViewData["ModoPrecioManual"]) ? "preciomanual" : "index" })'>
                                       Editar
                                    </a>
                                    <form id="form-toggle-@item.IdProducto" method="post" 
                                          action='@Url.Action("ToggleEstado", "Producto", new { id = item.IdProducto, origen = (ViewData["ModoPrecioManual"] != null && (bool)ViewData["ModoPrecioManual"]) ? "preciomanual" : "index" })' 
                                          style="display:none;">
                                        @Html.AntiForgeryToken()
                                    </form>

                                    <a href="#" class="btn btn-sm btn-danger"
                                       onclick="document.getElementById('form-toggle-@item.IdProducto').submit(); return false;">
                                       @(item.Estado.HasValue && item.Estado.Value ? "Desactivar" : "Activar")
                                    </a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>



    <!-- Modal Bootstrap -->
    <div class="modal fade" id="productoModal" tabindex="-1" aria-labelledby="productoModelLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-body" id="productoModalContent">
                    <!-- Acá se inyectará el contenido con AJAX -->
                </div>
            </div>
        </div>
    </div>



</div>


<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const filas = document.querySelectorAll(".fila-producto");

        filas.forEach(fila => {
            fila.addEventListener("click", function () {
                document.querySelectorAll(".acciones").forEach(acc => acc.style.visibility = "hidden");
                filas.forEach(f => f.classList.remove("selected"));

                const acciones = this.querySelector(".acciones");
                if (acciones) {
                    acciones.style.visibility = "visible";
                    acciones.style.width = "auto";
                    acciones.style.margin = "auto";
                    this.classList.add("selected");
                }
            });
        });
    });

$(document).on("click", ".open-modal", function (e) {
    e.preventDefault();
    var url = $(this).data("url");

    $.get(url, function (data) {
        $("#productoModalContent").html(data);

        // Inicializar el modal
        const modal = new bootstrap.Modal(document.getElementById('productoModal'), {
            backdrop: 'static',
            keyboard: false
        });

        modal.show();

        // Cargar categorías dentro del modal recién cargado, y ligar evento de crear categoría
        cargarCategoriasEnModal();
    });
});

function cargarCategoriasEnModal() {
    const categoriaSelect = document.getElementById("categoriaSelect");
    if (!categoriaSelect) return;  // Si no existe el select, salir

    // Cargar categorías para llenar el select
    fetch('/StockScreen/GetCategorias?t=' + new Date().getTime())
        .then(response => response.json())
        .then(data => {
            categoriaSelect.innerHTML = "";
            data.forEach(categoria => {
                const option = document.createElement("option");
                option.value = categoria.nombre;
                option.textContent = categoria.nombre;
                categoriaSelect.appendChild(option);
            });
        })
        .catch(error => console.error("Error al cargar categorías:", error));

    // Asociar evento para botón "Crear Categoría"
    const btnCrearCategoria = document.getElementById("btnCrearCategoria");
    if (btnCrearCategoria) {
        // Evitar ligar múltiples veces el evento
        btnCrearCategoria.removeEventListener("click", crearCategoriaHandler);
        btnCrearCategoria.addEventListener("click", crearCategoriaHandler);
    }

    function crearCategoriaHandler() {
        const nuevaCategoria = prompt("Ingrese el nombre de la nueva categoría:");
        if (!nuevaCategoria) return;

        fetch("/StockScreen/AgregarCategoria", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(nuevaCategoria)
        })
        .then(response => {
            if (!response.ok) {
                return response.text().then(text => { throw new Error(text); });
            }
            // Si se agregó correctamente, recargar categorías
            return fetch('/StockScreen/GetCategorias?t=' + new Date().getTime());
        })
        .then(response => response.json())
        .then(data => {
            categoriaSelect.innerHTML = "";
            data.forEach(categoria => {
                const option = document.createElement("option");
                option.value = categoria.nombre;
                option.textContent = categoria.nombre;
                categoriaSelect.appendChild(option);
            });
            alert("Categoría agregada correctamente.");
        })
        .catch(error => alert("Error al agregar la categoría: " + error.message));
    }
}



</script>
